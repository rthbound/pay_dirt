{"name":"PayDirt","tagline":"Reduce towering codebases to modular rubble (or more Ruby gems)","body":"## pay_dirt [![Gem Version](https://badge.fury.io/rb/pay_dirt.png)](http://badge.fury.io/rb/pay_dirt) [![Build Status](https://travis-ci.org/rthbound/pay_dirt.png?branch=master)](https://travis-ci.org/rthbound/pay_dirt) [![Coverage Status](https://coveralls.io/repos/rthbound/pay_dirt/badge.png?branch=master)](https://coveralls.io/r/rthbound/pay_dirt?branch=master) [![Code Climate](https://codeclimate.com/github/rthbound/pay_dirt.png)](https://codeclimate.com/github/rthbound/pay_dirt)\r\n\r\n#### A Ruby gem based on the \"use case\" pattern set forth in [opencurriculum-flashcards](https://github.com/isotope11/opencurriculum-flashcards)\r\n\r\nProvides the basic building blocks of a pattern capable of reducing a towering codebase to modular rubble (or more Ruby gems)\r\n\r\nThere are two ways to employ the pattern:\r\n\r\n1. use a class that inherits from [PayDirt::Base](https://github.com/rthbound/pay_dirt/blob/master/test/unit/pay_dirt/base_test.rb#L6-L24)\r\n2. use a class or module that includes [PayDirt::UseCase](https://github.com/rthbound/pay_dirt/blob/master/test/unit/pay_dirt/use_case_test.rb#L6-L26)\r\n\r\nservice object generator\r\n------------------------\r\npay_dirt now provides a service object generator,\r\npowered by [thor](https://github.com/erikhuda/thor).\r\nIn order to use them in your rails app, you'll need to install the task. Here's how:\r\n\r\n```\r\n$ thor install http://goo.gl/XI7Xw\r\n...\r\nDo you wish to continue [y/N]? y\r\nPlease specify a name for https://raw.github.com/rthbound/pay_dirt/master/pay_dirt.thor in the system repository [pay_dirt.thor]: pay_dirt\r\nStoring thor file in your system repository\r\n$\r\n```\r\n\r\nAfter installing, you can use the generator *anywhere* on your system. It'll tell you **how it's used**:\r\n```\r\n$ thor help pay_dirt:service_object:new\r\nUsage:\r\n  thor pay_dirt:service_object:new FILE -d, --dependencies=one two three\r\n\r\nOptions:\r\n  -d, --dependencies=one two three  # specify required dependencies\r\n  -D, [--defaults=key:value]        # Specify default dependencies\r\n  -i, [--inherit]                   # inherit from PayDirt::Base class\r\n                                    # Default: true\r\n  -m, [--include]                   # include the PayDirt::UseCase module (overrides --inherit)\r\n\r\ncreate a service object\r\n```\r\n\r\nexample\r\n-------\r\n```\r\n$ thor pay_dirt:service_object:new digit_check -d fingers toes -D fingers:10 toes:10\r\n  create  lib/service_objects/digit_check.rb\r\n```\r\n\r\nRunning the above generator will create the following file\r\n```ruby\r\nrequire 'pay_dirt'\r\n\r\nmodule ServiceObjects\r\n  class DigitCheck < PayDirt::Base\r\n    def initialize(options = {})\r\n      options = {\r\n        fingers: 10,\r\n        toes: 10,\r\n      }.merge(options)\r\n\r\n      load_options(:fingers, :toes, options)\r\n    end\r\n\r\n    def execute!\r\n      return PayDirt::Result.new(success: true, data: nil)\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### Usage:\r\n```ruby\r\nrequire \"service_objects/digit_check\"  #=> true\r\nServiceObjects::DigitCheck.new.execute!\r\n #=> #<PayDirt::Result:0xa0be85c @data=nil, @success=true>\r\n```\r\nAs you can see, we can now call `ServiceObjects::DigitCheck.new(fingers: 10, toes: 10).execute!`\r\nand expect a successful return object. Where you take it from there is up to you.\r\n\r\nmore examples\r\n-------------\r\n1. [rubeuler](https://github.com/rthbound/rubeuler)\r\n2. [protected_record](https://github.com/rthbound/protected_record)\r\n3. [konamio](https://github.com/rthbound/konamio)\r\n4. [eenie_meenie](https://github.com/rthbound/eenie_meenie)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
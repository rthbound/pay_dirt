{"name":"PayDirt","tagline":"Reduce towering codebases to modular rubble (or more Ruby gems)","body":"## pay_dirt [![Gem Version](https://badge.fury.io/rb/pay_dirt.png)](http://badge.fury.io/rb/pay_dirt) [![Build Status](https://travis-ci.org/rthbound/pay_dirt.png?branch=master)](https://travis-ci.org/rthbound/pay_dirt) [![Coverage Status](https://coveralls.io/repos/rthbound/pay_dirt/badge.png?branch=master)](https://coveralls.io/r/rthbound/pay_dirt?branch=master) [![Code Climate](https://codeclimate.com/github/rthbound/pay_dirt.png)](https://codeclimate.com/github/rthbound/pay_dirt)\r\n\r\n#### A Ruby gem based on the \"use case\" pattern set forth in [opencurriculum-flashcards](https://github.com/isotope11/opencurriculum-flashcards)\r\n\r\nProvides the basic building blocks of a pattern capable of reducing a towering codebase to modular rubble (or more Ruby gems)\r\n\r\nThere are two ways to employ the pattern:\r\n\r\n1. use a class that inherits from [PayDirt::Base](https://github.com/rthbound/pay_dirt/blob/master/test/unit/pay_dirt/base_test.rb#L6-L24)\r\n2. use a class or module that includes [PayDirt::UseCase](https://github.com/rthbound/pay_dirt/blob/master/test/unit/pay_dirt/use_case_test.rb#L6-L26)\r\n\r\n### Generators\r\n\r\nPayDirt now provides a service object generator, powered by [thor](https://github.com/erikhuda/thor). It takes a few options\r\n\r\n`--dependencies` or `-d` : An array of required dependencies (this option is required)\r\n\r\n`--defaults` or `-D` : An optional hash of default values for dependencies\r\n\r\n`--inherit` or `-i` : A boolean flag, raise it for an implementation that inherits from `PayDirt::Base` (this is default behavior)\r\n\r\n`--include` or `-m` : A boolean flag, raise it for an implementation that includes `PayDirt::UseCase`\r\n\r\nExample:\r\n\r\n```\r\n$ thor pay_dirt:service_object:new digit_check -d fingers toes -D fingers:10 toes:10\r\n  create  lib/service_objects/digit_check.rb\r\n```\r\n\r\nRunning the above generator will create the following file\r\n```ruby\r\nrequire 'pay_dirt'\r\n\r\nmodule ServiceObjects\r\n  class DigitCheck < PayDirt::Base\r\n    def initialize(options = {})\r\n      options = {\r\n        fingers: 10,\r\n        toes: 10,\r\n      }.merge(options)\r\n\r\n      load_options(:fingers, :toes, options)\r\n    end\r\n\r\n    def execute!\r\n      return PayDirt::Result.new(success: true, data: nil)\r\n    end\r\n  end\r\nend\r\n```\r\nWe can now call `ServiceObjects::DigitCheck.new(fingers: 10, toes: 10).execute!`\r\nand see a successful return object. Where you take it from there is up to you.\r\n\r\n### Other examples\r\n1. [rubeuler](https://github.com/rthbound/rubeuler)\r\n2. [protected_record](https://github.com/rthbound/protected_record)\r\n3. [konamio](https://github.com/rthbound/konamio)\r\n4. [eenie_meenie](https://github.com/rthbound/eenie_meenie)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}